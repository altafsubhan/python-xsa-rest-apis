#!/usr/bin/env node
module.exports = main

// --- bootstrap: try to find a locally installed cds, otherwise launch this one
if (!global.__cds_bin) { //> this is the root loaded
  global.__cds_bin = __dirname  // capture the initial script for debugging (see version.js)
  require('../lib/utils/require-local')('@sap/cds/bin/cds', {else:main})()  //> run the main function
}

function main () {

  // Display help if called without any parameters
  if (process.stdin.isTTY && process.argv.length < 3) {
    return require('./help')()
  }

  let [, , cmd, ...args] = process.argv; cmd = {
    b: 'build',
    c: 'compile',
    d: 'deploy',
    s: 'serve',
    e: 'eval',
    r: 'repl',
    i: 'init',
    h: 'help',
    v: 'version',
    n: 'new',
    '-v': 'version',
    '--version': 'version',
    '-?': 'help',
    '-e': 'eval'
  }[cmd] || cmd

  if (cmd !== 'repl') {
    const error = process.env.DEBUG
      ? err => { console.error(err); process.exit(1) }
      : err => { console.error(require('./utils/term').decorate.error(err)); process.exit(1) }
    process.on('uncaughtException', error)
    process.on('unhandledRejection', error)
  }

  try {
    // one of our built-in cli commands?
    if (require.resolve('./' + cmd))  cmd = './' + cmd
  } catch (err) {
    args.unshift(cmd)
    cmd = './compile'
  }
  cmd = require (cmd)

  // parse arguments and options for specific command
  const options = {}
  const argv = []
  const _options = cmd.options || []
  const _flags = cmd.flags || []
  const _shortcuts = cmd.shortcuts || []

  for (let i = 0; i < args.length; ++i) {
    let a = args[i], ox = _shortcuts.indexOf(a)
    if (ox >= 0) {
      if (ox > _options.length) { options[_flags[ox].slice(2)] = true; continue }
      else a = _options[ox]
    } else {
      ox = _flags.indexOf(a);
      if (ox >= 0) { options[_flags[ox].slice(2)] = true; continue }
    }
    ox = _options.indexOf(a)
    if (ox >= 0) {
      const optValue = (args[i + 1] && !args[i + 1].startsWith('-')) ? args[++i] : true
      options[_options[ox].slice(2)] = optValue
      continue
    }
    if (a.startsWith('-')) return invalid(a)
    else argv.push(a)
  }

  // finally run the command
  const result = cmd (argv, options)
  if (result && result.then) { // handle promise results
    result.then(res => { if (parseInt(res)) process.exitCode = res })// interpret returned int as exit code
  }

  function invalid(option) {
    console.error('\n  invalid option:', option, '\n')
    process.exitCode = 2 // illegal usage
  }
}

/* eslint no-console:0 no-eval: 0 */
