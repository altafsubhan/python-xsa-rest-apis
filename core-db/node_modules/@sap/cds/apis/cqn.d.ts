export class SELECT {SELECT:{
	distinct?: true
	from : source[]
	columns? : column_expr[]
	excluding? : string[]
	where? : predicate
	having? : predicate
	goupBy? : expr[]
	orderBy? : ordering_term[]
	limit: { rows:number, offset:number } 
}}

export class INSERT {INSERT:{
	into : name
	entries : any[]
	columns : string[]
	values : any[]
	rows : { [string] : any }[]
}}

export class UPDATE {UPDATE:{
	entity : name
	data : { [string] : expr }
	where? : predicate
}}

export class DELETE {DELETE:{
	from : name
	where? : predicate
}}

export class CREATE {CREATE:{
	entity : name
}}

export class DROP {DROP:{
	entity : name
}}

type name = string
type source = ( ref & SELECT ) & { as: name, join?:name, on?:xpr }
type column_expr = expr & { as: name, cast:any }
type ordering_term = expr & { asc?:true, desc?:true }
export type predicate = _xpr

export type expr = ref & val & xpr 
type ref = {ref: ( name & {filter:expr} & {args:expr[]} )[]}
type val = {val: any}
type xpr = {xpr: _xpr}
type _xpr = ( expr & operator ) []
type operator = string

export type enum_literal = {"#": string}
export type expr_literal = {"=": string}
