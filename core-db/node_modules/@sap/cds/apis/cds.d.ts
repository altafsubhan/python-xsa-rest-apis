import core from "./core";
import CSN from "./csn";
import QL from "./cds-ql";

/** This is the central entry point to cds. */
class cds extends core.cds {
// Models
	
	/** https://coreds.github.io/API/#cdsget */
	get (id:string, parent?:{id:string, filename?:string}) : Promise<CSN.Model>

	/** https://coreds.github.io/API/#cdsparse */
	parse : {
		cdl (src:string) : CSN.Model
		cql (src:string) : CSN.Query
		expr (src:string) : CSN.Expression
	}
	
	/** https://coreds.github.io/API/#cdsunfold */
	unfold: {
		all (model:CSN.Model) : linked.Model
		localized (model:CSN.Model) : linked.Model
		compositions (model:CSN.Model) : linked.Model
		toMany (model:CSN.Model) : linked.Model
		toOne (model:CSN.Model) : linked.Model
	}
	
	/** https://coreds.github.io/API/#cdscheck */
	check (model:CSN.Model) : linked.Model
	
	/** https://coreds.github.io/API/#cdsinferred */
	inferred (model:CSN.Model) : linked.Model
	
	/** https://coreds.github.io/API/#cdscompile */
	compile : {
		to: {
			json (model:CSN.Model) : string
			yaml (model:CSN.Model) : string
			cdl (model:CSN.Model) : string
			sql (model:CSN.Model) : string
			odata (model:CSN.Model) : CSN.Model
			edm (model:CSN.Model)
			edmx (model:CSN.Model)
		}
	}

// Runtime

	Session = Session
	ql = QL
	odata = cds_odata

// Shortcuts & Helpers
	load (m,p) : linked.Model
	clone (m) : CSN.Model
	options() : {
		data : ConnectOptions,
		odata : {}
	} 
	in (cwd) : cds
}

export = new cds
declare global {
	const { SELECT, INSERT, UPDATE, DELETE, CREATE, DROP } = QL
	const cds = new cds
}


//--------------------------------------------------------------------------
//  QL Sessions


	export class Session {
		connect (options? : ConnectOptions) : this
		deploy (options? : ConnectOptions) : this
		run (stmts) : Promise<any>
		foreach (stmt, callback) : this
		then (callback) : this
		catch (callback) : this
	}

	type ConnectOptions = { 
		/** A module name of a driver implementation to use. */
		driver?:string, 
		database?:string, 
		model?:string, 
		log?:string 
	}


//--------------------------------------------------------------------------
//  OData

	const cds_odata : {
		load (model:string) : linked.Model
		model (model:CSN.Model) : CSN.Model
		query (url:string) : object
		config (options:{entitySet:string})

		/**
		 * Constructs an OData service for the given model. 
		 * @param model the filename, relative to cwd, of a CDS model defining a service
		 * @param options optional object with options, such as .impl
		 * @param impl an init function to register custom handlers
		 */
		service (
			model:string, 
			options?: { impl: string }, 
			impl?: ServiceImpl
		) : ServiceProvider
		
		log: { all (req,res,next) }
		to: {
			edm (model:CSN.Model) : string
		}
	}

	interface ServiceProvider {
		on (op: CRUDx, entity?: Target, handler?: RequestHandler) : this
		before (op: CRUDx, entity?: Target, handler?: RequestHandler) : this
		after (op: CRUDx, entity?: Target, handler?: ResultsHandler) : this
		reject (ops: CRUD | CRUD[], ...entity: Target[]) : this
	}

	type Target = linked.Definition | string 
	type CRUDx = CRUD | string
	enum CRUD {
		'CREATE', 'READ', 'UPDATE', 'DELETE', 'COMMIT'
	}


	class ServiceDefinition extends linked.Definition {
		/** 
		 * Wraps a service implementation function to support IntelliSense in vscode. 
		 * It does nothing but simply returns the passed in function.
		 * 
		 * @param fn the service implementation function. Within it's body...
		 * - this refers to the current instance of cds.odata.service, used to register custom handlers. 
		 * - 1st arg refers to the entity definitions in the service's CSN
		 */
		static impl (fn: ServiceImpl) : typeof fn

		/**
		 * Constructs a new service provider for the given model. 
		 * @param model the filename, relative to cwd, of a CDS model defining a service
		 * @param options optional object with options, such as .impl
		 * @param impl an init function to register custom handlers
		 */
		static provider (
			model:string, 
			options?: { impl: string }, 
			impl?: ServiceImpl
		) : ServiceProvider
	}


	/**
	 * A service implementation function. 
	 * @param this - the ODataService
	 * @param entities - 
	 */
	interface ServiceImpl { 
		(this: ServiceProvider, entities: linked.Definitions)
	}
	interface RequestHandler { 
		(req,res) 
	}
	interface ResultsHandler { 
		(results : any[]) 
		(each : any) 
	}


//--------------------------------------------------------------------------