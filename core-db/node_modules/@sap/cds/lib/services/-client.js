const cds = require ('../index.js')
const {SELECT} = cds.ql

module.exports = class ServiceClient {

    static for (service) {
        if (typeof service === 'string') {
            const provider = cds.service.providers.find (s => s.path === service || s.name === service)
            if (!provider)  throw new Error (`Didn't find service provider for ${service}`)
            else  service = provider
            service.router //> ensure service is setup --> REVISIT: replace with OData-less services
        }
        return Object.assign (new ServiceClient, {service, entities:service.entities})
    }

    run (cqn) { return new Promise((reply, error) => {
        const [ method, ref ] = (
            cqn.action ? [ cqn.action, cqn.entity ] :
            cqn.SELECT ? [ 'READ', cqn.SELECT.from.ref[0] ] :
            cqn.INSERT ? [ 'CREATE', cqn.INSERTinto ] :
            cqn.UPDATE ? [ 'UPDATE', cqn.UPDATE.entity ] :
            cqn.DELETE ? [ 'DELETE', cqn.DELETE.from ] :  []
        )
        const req = {__proto__:RequestContext,
            query: cqn,  method,
            target: this.entities[ref] || this.service.model.definitions[ref],
            reply, error
        }
        this.service._oData._executeHandlers (req)  // REVISIT: don't route that thru OData
    })}

    read (entity) { return this.run(SELECT.from(entity)) }
    get (entity) { return this.run(SELECT.from(entity)) }

}


const RequestContext = {
    data: {},
    // REVISIT: questionably duplicates or too OData-specific...
    get entityName(){ return /([^.]+)$/.exec(this.entity.name) && RegExp.$1 },
    get entity(){ return this.target },
    getEntity(){ return this.target },
    getCQN(){ return this.query },
    get isCollection(){ return false },
    get isCount(){ return false },
    get includeCountInResult(){ return false },
    get propertyName(){},
    get user(){},
    get locale(){},
    get pagination(){},
    get statements(){ return cds.ql },
    error(e) { throw e }
}

// const Operations = function() {
//     const all = {
//         crud: {},
//         http: {},
//         sql: {},
//     };[
//         'CREATE', 'POST', 'INSERT',
//         'READ', 'GET', 'SELECT',
//         'UPDATE', 'PUT', 'UPDATE',
//         'DELETE', 'DELETE', 'DELETE',
//     ]
//     .forEach (([crud,http,sql])=>{
//         all.crud[crud] = {http,sql}
//         all.http[http] = {crud,sql}
//         all.sql[sql] = {crud,http}
//     })
//     return all
// }


if (!module.parent) cds.serve('all') .then (()=>{
    const cat = cds.client.for ('CatalogService')
    const {Books} = cat.entities
    return cat.get (Books)
    // return cat.run (SELECT.from(Books))
})
.then (books => books.forEach (b => console.log(b)))  // eslint-disable-line
.catch (console.error)  // eslint-disable-line