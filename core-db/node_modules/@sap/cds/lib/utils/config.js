const env = process.env.NODE_ENV || process.env.CDS_ENV || 'dev'
const defaults = require('./_defaults')
const home = require('os').homedir()
const path = require('path')
const cached = {}

/**
 * Both a config inctance as well as factory for.
 */
class CDSConfig {

  constructor(){ Object.assign (this,defaults) }

  in (cwd) { return cached[cwd] || (
    cached[cwd] = (new CDSConfig)
    .load (home, '.cdsrc')
    .load (cwd,'package.json', p => p.cds)
  )}

  load (cwd, res, _conf=o=>o) {
    try {
      const src = path.resolve (cwd, res)
      const conf = _conf (require (src))
      if (conf) {
        (this._source||(this._source = [])) .push (src)
        this.add (conf)
      }
    } catch (e) {
      if (e.code !== 'MODULE_NOT_FOUND')  throw e
    }
    return this
  }

  add (conf) {
    for (let p in conf) {
      if (p === '['+env+']')                 this.add(conf[p])
      else if (Array.isArray(conf[p]))       this[p] = (this[p] || []).concat(conf[p])
      else if (typeof conf[p] === 'object')  this[p] = Object.assign({}, this[p], conf[p])
      else                                   this[p] = conf[p]
    }
    return this
  }

  for (conf) {
    return (new CDSConfig) .add (conf)
  }

}

module.exports = (new CDSConfig) .in (process.cwd())