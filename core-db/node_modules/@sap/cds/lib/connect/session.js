const {Connection, promise} = require('./run')
const cds = require('../index')

module.exports = class Session extends Connection {

  constructor (_options, o = options4(_options)) {
    super(/* sessions manage pools of connections */)
    this.use(o.driver) && this.driver.connect(o)

    // ready.catch (e => {
    //   throw e.code === 'MODULE_NOT_FOUND' ? new Error (`Couldn't resolve a driver for '${o.driver}'`) : e
    // })
    const ready = (o.model) ?  this.load(o.model) : Promise.resolve()
    this.ready = ready.then(() => { this.ready = {then: fn => fn()} })
  }

  use (driver = 'sqlite') {
    if (typeof driver === 'string')  driver = require('@sap/cds-ql').connect
    if (process.env.DEBUG)  driver = require('./debug')(driver)
    driver.session = this // TODO: current drivers don't support that
    this.driver = driver
    return this
  }

  load (model) {
    return this.ready = cds.load(model)
      .then(m => this.model = cds.reflect(m))
  }

  deploy (model) {
    return require('./deploy') .call (this, model)
  }

  run (...args) {
    let p, ac
    return p = promise(this.ready.then(() => this.driver.acquire())
      .then(dbc => (p.conn = ac = new Connection({dbc})).run(...args))
    ).finally(() => this.driver.release(ac.dbc))
  }
}



const defaults = cds.config.data || {}

function options4 (o) {
  if (!o) return defaults
  if (typeof o === 'string') {
    if (defaults[o]) return defaults[o]
    let [, driver, database] = /([\w.]+)(?::(.*))?/.exec(o)
    return {driver, database}
  }
  return Object.assign({}, defaults, o)
}
