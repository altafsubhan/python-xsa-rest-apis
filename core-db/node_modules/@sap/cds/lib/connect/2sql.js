const cds = require ('../index')
const { Association, string, number } = cds.builtin.classes

const SQL = module.exports = Object.assign (csn2sql, {
  naming (o={}) { return {
    "quoted": { // as in HANA CDS
      entity: name => `"${name}"`,
      element: name => `"${_slugify(name)}"`,
    },
    "mixed": { // for sqlite
      entity: name => `"${name}"`,
      element: name => _slugify(name),
    },
    "plain": { // as it should be
      entity: name => _slugify(name),
      element: name => _slugify(name),
    },
    "all-upper": { // as in ABAP
      entity: name => `"${_slugify(name.toUpperCase())}"`,
      element: name => `"${_slugify(name.toUpperCase())}"`,
    },
    "all-lower": { // ABAP-like for e.g. PostgreSQL
      entity: name => `"${_slugify(name.toLowerCase())}"`,
      element: name => `"${_slugify(name.toLowerCase())}"`,
    },
    "bracketed": { // e.g. as supported in SQL Server
      entity: name => `[${name}]`,
      element: name => `[${name}]`,
    }
  }[o.sql || o.sql_mapping || cds.config.data.sql_mapping]
}})
function _slugify (name) {
    return name.replace(/::/,'__').replace(/\./g,'_').replace(/^\$/,'_$')
}


function csn2sql (model, options) {

	const name4 = SQL.naming (options)
	const tables=[], views=[]
	// model = cds.unfold.all (model)
	model = cds.linked (model)
	model.foreach (cds.entity, e=>{
		if (e.abstract)  return
		if (e.source)  return views.push (CREATE_view4(e))
		if (e.query)  return views.push (CREATE_view4(e))
		if (e.type)  return views.push (CREATE_view4(e))
		else return tables.push (CREATE_table4(e))
	})
	return [...tables.reverse(), ...views]


	// CREATE TABLE...
	function CREATE_table4 (entity) {

		// collect flattened columns
		let cols=[]; (function _unfold (elements, prefix) { for (let name in elements) {
			let e = elements [name], type //> filled in below
			if (e.elements) {  // structs unfold recursively
				_unfold (e.elements, prefix + name +'.')
				continue
			} else if (e.value) { // calculated fields are skipped
				continue
			} else if (e instanceof Association) { // Associations are skipped
				e.foreignkeys && _unfold (e.foreignkeys, prefix + name +'.')
				continue
			} else if (e instanceof string) {  // strings need a length
				type = e[sql].type +'('+( e.length||111 )+')'
			} else if (e instanceof number) {  // numerics may have precision and scale
				let {precision:p, scale:s} = e
				type = e[sql].type +( p ? '('+ p +( s ? ','+ s : '' ) +')' : '' )
			} else {  // all other are mapped to primitive types
				type = e[sql].type
				if (!type) {
					console.warn("[cds2sql] â€“ cannot map type to SQL in", "'"+ this.name +' : '+ this.type +"'")
					continue
				}
			}
			cols.push (name4.element(prefix + name) +' '+ type)
		}}) (entity.elements,'')

		// determine primary key
		let keys=[];  for (let k in entity.keys) {
			let e = entity.elements[k]
			if (e.elements)  keys = keys.concat (
				Object.keys (e.elements).map (each => k+'.'+each)
			)
			else  keys.push (name4.element(k))
		}
		if (keys.length > 0)  cols.push ('PRIMARY KEY ('+ keys + ')')

		// construct and return DDL stmt string
		return `CREATE TABLE ${name4.entity (entity.name)} (\n`
			+ `   ${cols.join(',\n   ')}`
		+`\n)`
	}

	// CREATE VIEW...
	function CREATE_view4 (e) {
		if (e.source)  return (`CREATE VIEW ${name4.entity(e.name)} as SELECT * from ${name4.entity(e.source)}`)
		if (e.query)  return (
			`CREATE VIEW ${e.name.replace(/\./g,'_')} as ...`
		)
		if (e.type)  return (
			"CREATE VIEW "+ e.name.replace(/\./g,'_') +"\n AS "+
			"SELECT * from "+ e.type.replace(/\./g,'_')
		)
	}

}

// SQL type mappings
const sql = Symbol('sql'), types = {
	boolean: 'char(1)',
	string: 'nvarchar',
	date: 'datetime',
	Integer: 'integer',
	Integer16: 'smallint',
	Integer32: 'integer',
	Integer64: 'bigint',
	Float: 'float',
	Double: 'double',
	Decimal: 'decimal',
	Date: 'date',
	Time: 'time',
	Timestamp: 'timestamp',
	Binary: 'varbinary',
 }
for (let t in types)  cds.builtin.types[t][sql] = { type: types[t] }


// quick tests
if (!module.parent) {
	process.chdir ('/SAP/cdx/docs/2-Get Started/samples/')
	cds.load ('db/bookshop') .then (cds.compile.to.sql)
	.then (console.log) .catch (console.error)
}
/* eslint no-console:off */
