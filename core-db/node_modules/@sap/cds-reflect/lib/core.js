const lazy = req => Object.assign ((id) => lazy => req(id), {_:req}); (()=> require = lazy(require))()
const clz = (lazy,p) => cds.builtin.classes [p]
const cds = module.exports = {
  
	builtin: require ('./types'),
	Association : clz,
	Composition : clz,
	context : clz,
	service : clz,
	entity : clz,
	struct : clz,
	array : clz,

	reflect: require ('./reflect'),
	linked: require ('./linked'),
	clone:m => JSON.parse (JSON.stringify(m)),

/** helpers */__proto__: {
	lazy, lazify(o=this) { Reflect.ownKeys(o).forEach (p=>{
		let g=o[p]; if (/^((function )?\w*\()?lazy/.test(g)) $(o,p, {
			get( ){ return $(o,p,{value: g(o,p) })[p] },
			set(v){ return $(o,p,{value: v})[p] },
			configurable:1
		})
	}); return o },
}}
const $ = Object.defineProperty