#!/usr/bin/env node

// command line interface to the cds api resp. cds compiler
// Usage: cdsc [options] <file> ...
// Call cdsc --help for a detailed description
// Exit codes are:
//   0   for success
//   1   compilation error
//   2   command line usage error

'use strict';

/* eslint no-console:off */

const program = require('commander');
const compiler = require('../lib/main');
const tntSpecific = require('../lib/edm/tntSpecific');
const cdsv = require('./cdsv');

program
  .usage('[options] <file> ...')
  .description(`Compile a CDS model given from the input files. Input files may be CDS source files (.cds), CSN
  model files (.json), property files for localized annotations (.properties) and XML files (.xml)
  for pre-processed ODATA annotations.`)

  .option('@@', 'General Options')
  .option('-h, --help',             'Display this help text and exit')
  .option('-w, --warning <level>',  'Show warnings up to <level> (0: Error, 1: Warnings (default), 2: Info)',
          verifyWarningOption)
  .option('-v, --version',          'Display version number and exit')

  .option('@@', 'Generation options (default if none given: generate original model as CSN to <stdout>)')
  .option('-o, --out <dir>',        'Place generated files in directory <dir>, default is "-" for <stdout>')
  .option('-H, --to-hana <flags>',  `Generate HANA CDS source, <flags> can be a comma-separated combination
                         of either "flat" (default) or "deep" for entity names, either "assocs"
                         (default) or "joins" for associations and any of "src,csn"
                           flat    : Produce uppercased flattened HANA entity names with
                                     underscores
                           deep    : Produce HANA entity names with dots and nested contexts
                                     as in CDL
                           assocs  : Keep associations in HANA CDS as far as possible
                           joins   : Transform associations to HANA CDS joins
                           src     : Generate HANA CDS source files
                           csn     : Generate "hana_csn.json" with HANA-preprocessed model`, verifyToHanaOption)
  .option('-O, --to-odata <flags>', `Generate ODATA metadata and annotations, <flags> can be a comma-
                         separated combination of "xml,json,separate,combined,csn" and either
                         "v2" (default) or "v4" version
                           v2      : Generate ODATA V2 output
                           v4      : Generate ODATA V4 output
                           xml     : Generate XML output (separate or combined)
                           json    : Generate JSON output (not available for V2)
                           separate: Generate "<svc>_metadata.xml" and "<svc>_annotations.xml"
                           combined: Generate "<svc>.xml"
                           csn     : Generate "odata_csn.json" with ODATA-preprocessed model`, verifyToOdataOption)
  .option('-C, --to-cdl',           'Generate CDS source')
  .option('-S, --to-swagger',       'Generate Swagger (OpenAPI) JSON')
  .option('-Q, --to-sql <flags>',   `Generate SQL DDL statements, <flags> can be a comma-separated
                         combination of either "flat" (default) or "deep" for entity names,
                         either "assocs" (default) or "joins" for associations and any of
                         "src,csn"
                           flat    : Produce uppercased flattened table/view names with
                                     underscores
                           deep    : Produce quoted table/view names with dots
                           assocs  : Keep associations as far as possible (only usable for
                                     HANA SQL)
                           joins   : Transform associations to SQL joins
                           src     : Generate SQL source files
                           csn     : Generate "sql_csn.json" with SQL-preprocessed model`, verifyToSqlOption)
  .option('-I, --to-i18n <style>',  `Generate files for translation of localized annotations, <style> can
                         be either "prop" (default) for a property file or "ui5" for a UI5-
                         style combination of property file and modified model
                           prop    : Generate property file with  annotation text
                           ui5     : Generate model with placeholders and property file with
                                    annotation text`,
          verifyI18nOption)
  .option('-l, --lint-mode',        `Generate nothing, just produce single-file error messages if any (for
                         use by editors)`)
  .option('    --to-csn',           'Generate original model as CSN to "csn.json"')

  .option('@@', 'Backward compatibility options (deprecated, do not use)')
  .option('    --check-model',      'Perform extra checks on the model') // FIXME: Should remove option and do this always
  .option('    --oldstyle-self',    'Allow "self" alternatively to "$self" (implied by --tnt-flavor)') // FIXME: We should get rid of that
  .option('    --tnt-flavor',       'Compile with backward compatibility for the "TNT" project')
  .option('    --tnt-csn',          'Generate TNT-specific post-processed CSN') // FIXME: Should migrate towards --to-odata v2,xml,separate,csn'

  .option('@@', 'Diagnostic options')
  .option('    --trace-parser',     'Trace parser') // FIXME: Previously --trace-parse
  .option('    --trace-parser-amb', 'Trace parser ambiguities') // FIXME: Previously --ambig-detection
  .option('    --trace-fs',         'Trace file system access caused by "using from"')

  .option('@@', 'Internal options (for testing only, may be changed/removed at any time)')
  .option('-R, --raw-output',       'Write raw augmented CSN and error output to stdout')
  .option('    --beta-mode',        'Enable unsupported, incomplete (beta) features')
  .option('    --new-csn',          'Produce new-style CSN (preview of planned future CSN format)')
  .option('    --hana-flavor',      'Compile with backward compatibility for HANA CDS (incomplete)')
  .option('    --parse-only',       'Stop compilation after parsing and write result to stdout')
  .option('    --to-extensions',    'Generate augmented CSN for extensions from properties file') // FIXME: Previously 'generate-extensions', should later become part of normal compilation, producing plain CSN
  .option('    --test-mode',        `Produce extra-stable output for automated tests (normalize filenames
                         in errors, sort properties in CSN, omit version in CSN)`)
  .option('    --extra-augment',    'Compile to plain CSN, augment and compile again, augmentation tests')
  .option('    --re-augmented',     'Re-augmented CSN and error output') // FIXME: What does that mean/do? Isn't that what --extra-augment is supposed to do?
  .option('    --omit-record-type', 'Omit unnecessary type attribute for ODATA records') // FIXME: Previously --odata-omit-record-type
  .option('    --disable-propagate',`Do not propagate properties with "--to-csn" (makes result re-usable
                         with extensions)`) // FIXME: Should probably become a flag for '--to-csn'
  ;
  // Note: When adding any options where the '--foo-bar' part becomes longer than the longest existing one,
  // you will need to adapt the indentation of those having multiple lines, so that '--help' comes out aligned.
  // Generally, the alignment of the lines above needs a bit of care - the multi-line ones need to be just so...
  // Also, we try to keep the output below 100 characters per line.

// Note: Instead of throwing ProcessExitError, we would rather just call process.exit(exitCode),
// but that might truncate the output of stdout and stderr, both of which are async (or rather,
// may possibly be async, depending on OS and whether I/O goes to TTY, socket, file, ... sigh)
class ProcessExitError extends Error {
  constructor(exitCode,...args) {
    super(...args);
    this.exitCode = exitCode;
  }
}

// Deal with '--version' explicitly (so that it appears in the proper place in '--help')
program.on('option:version', function() {
  process.stdout.write(compiler.version() + '\n');
  throw new ProcessExitError(0);
});

// Deal with '--help' explicitly (needs some tweaking for the text formatting)
program.on('option:help', function() {
  displayUsage(null, 0);
});

// Report unknown options explicitly (so that it looks like the other error messages)
program.unknownOption = (option) => {
  displayUsage(`Unknown option "${option}"`, 2);
}

// Parse the command line and translate it into options
try {
  program.parse(process.argv);
  // Complain if no files given
  // FIXME: Might later read from stdin instead
  if (!program.args.length) {
    displayUsage('Missing <file> ... arguments', 2);
  }
  var options = {
    // Default warning level is 1 (warning)
    warning : program.warning === undefined ? 1 : program.warning,
    // Default output goes to stdout
    out : program.out || '-',
    toHana: program.toHana,
    toOdata : program.toOdata,
    toCdl : program.toCdl,
    toSwagger : program.toSwagger,
    toSql : program.toSql,
    toI18n : program.toI18n,
    lintMode : program.lintMode,
    // By default, toCsn is on if no other to-option is set
    // FIXME: Because of the way it is implemented, the preprocess options currently also precludes toCsn
    toCsn : program.toCsn || (!program.toHana && !program.toOdata && !program.toCdl && !program.toSwagger && !program.toSql
                              && !program.toI18n && !program.lintMode && !program.preprocess),
    checkModel : program.checkModel,
    oldstyleSelf : program.oldstyleSelf,
    tntFlavor : program.tntFlavor && tntSpecific.getDefaultTntFlavorOptions(),
    tntCsn : program.tntCsn,
    traceParser : program.traceParser,
    traceParserAmb : program.traceParserAmb,
    traceFs : program.traceFs,
    rawOutput : program.rawOutput,
    betaMode : program.betaMode,
    newCsn : program.newCsn,    // TEMP
    disablePropagate: program.disablePropagate, // TODO: how to handle this?
    hanaFlavor : program.hanaFlavor,
    parseOnly : program.parseOnly,
    toExtensions : program.toExtensions,
    testMode : program.testMode,
    extraAugment : program.extraAugment,
    reAugmented : program.reAugmented,
    omitRecordType : program.omitRecordType,
  }

  // Delegate to the old implementation
  cdsv.executeCommandLine(options, program.args)
} catch (err) {
  // This whole try/catch is only here because process.exit does not wotk in combination with
  // stdout/err - see comment at ProcessExitError
  if (err instanceof ProcessExitError) {
    process.exitCode = err.exitCode;
  } else {
    throw err;
  }
}

// Display 'error' (if any) and the program's usage help text, then exit with exit code <code>
function displayUsage(error, code) {
  program.outputHelp(helpText => {
    return helpText
              .replace(/\n\n {2}Options:\n\n/, '')  // Get rid of the extra 'Options:' headline with many newlines 
              .replace(/ {4}@@ */g, '\n  ')         // Convert the '@@' fake-options to subsections
              .replace(/ {4}-h, --help *output usage information\n/g, '');  // Get rid of auto-generated '--help'
  });
  // Display error at the end (more readable, no scrolling)
  if (error) {
    process.stderr.write(`\n  ERROR: ${error}\n`);
  }
  throw new ProcessExitError(code);
}

// Check the value of --warning for legal values. Return value as an int.
function verifyWarningOption(value) {
  let result = parseInt(value);
  if (Number.isNaN(result) ||  result < 0 || result > 2) {
    displayUsage(`Illegal <level> "${value}" for option "-w, --warning"`, 2);
  }
  return result;
}

// Check the value of --to-odata for legal values. Return the value as an object with sub-options.
function verifyToOdataOption(value) {
  let result = {};
  for (let flag of value.split(',')) {
    if (!/^v4|v2|xml|json|separate|combined|csn$/.test(flag)) {
      displayUsage(`Illegal <flag> "${flag}" for option "-O, --to-odata"`, 2);
    }
    result[flag] = true;
  }
  if (result.v2) {
    result.version = 'v2'
  }
  if (result.v4) {
    result.version = 'v4'
  }
  if (result.v2 && result.v4) {
    displayUsage(`Either "v2" (default) or "v4" can be specified for version with option "-O, --to-odata", but not both`, 2);
  }
  delete result.v2;
  delete result.v4;
  return result;
}

// Check the value of --to-hana for legal values. Return the value as an object with sub-options.
function verifyToHanaOption(value) {
  let result = {};
  for (let flag of value.split(',')) {
    if (!/^flat|deep|assocs|joins|src|csn$/.test(flag)) {
      displayUsage(`Illegal <flag> "${flag}" for option "-H, --to-hana"`, 2);
    }
    result[flag] = true;
  }
  if (result.flat) {
    result.names = 'flat'
  }
  if (result.deep) {
    result.names = 'deep'
  }
  if (result.flat && result.deep) {
    displayUsage(`Either "flat" (default) or "deep" can be specified for names with option "-H, --to-hana", but not both`, 2);
  }
  delete result.flat;
  delete result.deep;
  if (result.assocs) {
    result.associations = 'assocs'
  }
  if (result.joins) {
    result.associations = 'joins'
  }
  if (result.assocs && result.joins) {
    displayUsage(`Either "assocs" (default) or "joins" can be specified for associations with option "-H, --to-hana", but not both`, 2);
  }
  delete result.assocs;
  delete result.joins;
  return result;
}

// Check the value of --to-sql for legal values. Return the value as an object with sub-options.
function verifyToSqlOption(value) {
  let result = {};
  for (let flag of value.split(',')) {
    if (!/^flat|deep|assocs|joins|src|csn$/.test(flag)) {
      displayUsage(`Illegal <flag> "${flag}" for option "-Q, --to-sql"`, 2);
    }
    result[flag] = true;
  }
  if (result.flat) {
    result.names = 'flat'
  }
  if (result.deep) {
    result.names = 'deep'
  }
  if (result.flat && result.deep) {
    displayUsage(`Either "flat" (default) or "deep" can be specified for names with option "-Q, --to-sql", but not both`, 2);
  }
  delete result.flat;
  delete result.deep;
  if (result.assocs) {
    result.associations = 'assocs'
  }
  if (result.joins) {
    result.associations = 'joins'
  }
  if (result.assocs && result.joins) {
    displayUsage(`Either "assocs" (default) or "joins" can be specified for associations with option "-Q, --to-sql", but not both`, 2);
  }
  delete result.assocs;
  delete result.joins;
  return result;
}

// Check the value of --to-i18n for legal values. Return the value as an object with sub-options.
function verifyI18nOption(value) {
  if (!/^prop|ui5$/.test(value)) {
    displayUsage(`Illegal <style> "${value}" for option "-I, --to-i18n"`, 2);
  }
  return { style : value } ;
}
